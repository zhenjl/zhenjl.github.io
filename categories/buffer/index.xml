<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Buffer on Zen 3.1 </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/buffer/index.xml/</link>
    <language>en-us</language>
    <author>Jian Zhen</author>
    <copyright>Jian Zhen</copyright>
    <updated>Sat, 30 Nov 2013 23:20:22 PST</updated>
    
    <item>
      <title>Ring Buffer - Variable-Length, Low-Latency, Lock-Free, Disruptor-Style</title>
      <link>http://localhost:1313/blog/ring-buffer-variable-length-low-latency-disruptor-style/</link>
      <pubDate>Sat, 30 Nov 2013 23:20:22 PST</pubDate>
      <author>Jian Zhen</author>
      <guid>http://localhost:1313/blog/ring-buffer-variable-length-low-latency-disruptor-style/</guid>
      <description>

&lt;p&gt;Comments/feedbacks on &lt;a href=&#34;https://news.ycombinator.com/item?id=6831293&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;http://www.reddit.com/r/golang/comments/1rvvb6/ring_buffer_variablelength_lowlatency_lockfree/&#34;&gt;Reddit&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2013-12-04 Update #1: Read a &lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/7tUShPuPfNM&#34;&gt;very interesting thread on golang-nuts list&lt;/a&gt; on the performance of interface. Seems like using interfaces really affects performance. In Joshua&amp;rsquo;s test he saw a 3-4x performance difference. I decided to try this on the ring buffer implementation since I am currently using interface. A quick test laster, looks like NOT using interface increased performance 2.4x. For now the code is in the &amp;ldquo;&lt;a href=&#34;https://github.com/reducedb/ringbuffer/tree/nointerface&#34;&gt;nointerface&lt;/a&gt;&amp;rdquo; branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Benchmark1ProducerAnd1Consumer-3         5000000               353 ns/op
Benchmark1ProducerAnd1ConsumerInBytes-3 10000000               147 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;tl;dr&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reducedb/ringbuffer&#34;&gt;This project&lt;/a&gt; implements a low-latency lock-free ring buffer for variable length byte slices. It is modeled after the &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor/&#34;&gt;LMAX Disruptor&lt;/a&gt;, but not a direct port.&lt;/li&gt;
&lt;li&gt;If you have only a single core, don&amp;rsquo;t use this. Use Go channels instead! In fact, unless you can spare as many cores as the number of producers and consumers, don&amp;rsquo;t use this ring buffer.&lt;/li&gt;
&lt;li&gt;In fact, for MOST use cases, Go channel is a better approach. This ring buffer is really a specialized solution for very specific use cases.&lt;/li&gt;
&lt;li&gt;Primary pattern of this ring buffer is single producer and multiple consumer, where the single producer put bytes into the buffer, and each consumer will process ALL of the items in the buffer. (Other patterns can be implemented later but this is what&amp;rsquo;s here now.)&lt;/li&gt;
&lt;li&gt;This ring buffer is designed to deal with situations where we don&amp;rsquo;t know the length of the byte slice before hand. It will write the byte slice to the buffer across multiple slots in the ring if necessary.&lt;/li&gt;
&lt;li&gt;The ring buffer currently employs a lock-free busy-wait strategy, where the producer and consumers will continue to loop until data is available. As such, it performs very well in a multi-core environment (almost twice as fast as Go channels) if you can spare 1 core per produer/consumer, but extremely poorly in a single-core environment (600 times worse compare to Go channels).&lt;/li&gt;
&lt;li&gt;You can find a lot of information on the LMAX Disruptor. The resources I used include &lt;a href=&#34;http://mechanitis.blogspot.com/search/label/disruptor&#34;&gt;Trisha&amp;rsquo;s Disruptor blog series&lt;/a&gt;, &lt;a href=&#34;http://lmax-exchange.github.io/disruptor/&#34;&gt;LMAX Disruptor main page&lt;/a&gt;, &lt;a href=&#34;http://lmax-exchange.github.com/disruptor/files/Disruptor-1.0.pdf&#34;&gt;Disruptor technical whitepaper&lt;/a&gt;, and Martin Fowler&amp;rsquo;s &lt;a href=&#34;http://martinfowler.com/articles/lmax.html&#34;&gt;LMAX Architecture article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can also read more about &lt;a href=&#34;http://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;circular buffer&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Producer-consumer_problem&#34;&gt;producerâ€“consumer problem&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Go Learn Project #7 - Ring Buffer&lt;/h3&gt;

&lt;p&gt;For the past several projects (&lt;a href=&#34;http://zhen.org/blog/benchmarking-integer-compression-in-go/&#34;&gt;#6&lt;/a&gt;, &lt;a href=&#34;http://zhen.org/blog/bitmap-compression-using-ewah-in-go/&#34;&gt;#5&lt;/a&gt;, &lt;a href=&#34;http://zhen.org/blog/benchmarking-bloom-filters-and-hash-functions-in-go/&#34;&gt;#4&lt;/a&gt;), I&amp;rsquo;ve mostly been hacking bits, and optimizing them as much as possible for a single core.&lt;/p&gt;

&lt;p&gt;For project #7, I decided to do something slightly different. This time we will create a ring buffer that can support variable length byte slices, and leverage multi-cores using multiple goroutines.&lt;/p&gt;

&lt;p&gt;Primary target use case is for a producer to read bytes from sockets, ZMQ, files, etc that require process, like JSON, csv, and tsv strings, at a very high speed, such as millions of lines per second, and put these lines into a buffer so other consumers can process these.&lt;/p&gt;

&lt;p&gt;A good example is when we import files with millions of lines of JSON object. These JSON objects are read from files, inserted into the buffer, and then they are unmarshalled into other structures.&lt;/p&gt;

&lt;p&gt;The goal is to process millions of data items per second.&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Ring Buffer&lt;/h4&gt;

&lt;p&gt;There are several ways to tackle this. A queue or ring buffer is usually a good data structure for this. You can think of a ring buffer is just a special type of queue that&amp;rsquo;s just contiguous by wrapping itself. As Wikipedia said,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A circular buffer, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. This structure lends itself easily to buffering data streams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, implementation-wise, we can tackle this problem using a standard ring buffer. The most common way of implementing a standard ring buffer is to keep track of a head and a tail pointer, and keep putting items into the buffer but ensuring that head and tail don&amp;rsquo;t cross each other.&lt;/p&gt;

&lt;p&gt;In most implementations, the pointers are mod&amp;rsquo;ed with the ring size to determine the next slot size. Also, mutex is used to ensure only one thread is modifying these pointers at the same time.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Go Channels&lt;/h4&gt;

&lt;p&gt;In Go, an idiomatic and fairly common way is to use &lt;a href=&#34;http://golang.org/doc/effective_go.html#channels&#34;&gt;buffered channels&lt;/a&gt; to solve this problem. It is effectively a queue where a producer puts data items into one end of the channel, and the consumer reads the data items on the other end of the channel. There are certainly pros and cons to to this approach.&lt;/p&gt;

&lt;p&gt;First, it is Go idiomatic! Need I say more&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;This is probably the easiest approach since Go Channel is already a battle-tested data structure and it&amp;rsquo;s readily available. An example is provided below in the examples section. Performance-wise it is actually not too bad. In a multi-core environment, it&amp;rsquo;s about 60% of the performance compare to the ring buffer. However, in a single-core environment, it is MUCH faster. In fact, 1300 times faster than my ring buffer!&lt;/p&gt;

&lt;p&gt;There is one major difference between using channels vs this ring buffer. When the channel has multiple consumers, the data is multiplexed to the consumers. So each consumer will get only part of the data rather than going through all the data. This is illustrated by &lt;a href=&#34;http://play.golang.org/p/ACC5LIohIe&#34;&gt;this play&lt;/a&gt;. The current design of the ring buffer allows multiple consumers to go through every item in the queue. A obvious workaround is to send the data items to multiple channels.&lt;/p&gt;

&lt;p&gt;One down side with my channel approach is that I end up creating a lot of garbage over time and will need to be GC&amp;rsquo;ed. Specifically, I am creating a new byte slice for each new data item. Again, there is workaround for this. One can implement a &lt;a href=&#34;http://golang.org/doc/effective_go.html#leaky_buffer&#34;&gt;leaky buffer&lt;/a&gt;. However, because we don&amp;rsquo;t know how big the data items are before hand, it&amp;rsquo;s more difficult to preallocate the buffers up front.&lt;/p&gt;

&lt;p&gt;There might actually be a way to implement the leaky buffer with a big preallocated slice. I may just do that as the next project. The goal is to see if we can avoid having to allocate individual byte slices and leverage CPU caching for the big buffer.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Lock-Free Ring Buffer&lt;/h4&gt;

&lt;p&gt;The way that I&amp;rsquo;ve decided to tackle this problem is to model the ring buffer after the LMAX Disruptor. If you haven&amp;rsquo;t read Martin Fowler&amp;rsquo;s &lt;a href=&#34;http://martinfowler.com/articles/lmax.html&#34;&gt;article on LMAX Architecture&lt;/a&gt;, at this time I would recommend that you stop and go read it first. After that, you should go read &lt;a href=&#34;http://mechanitis.blogspot.com/search/label/disruptor&#34;&gt;Trisha&amp;rsquo;s Disruptor blog series&lt;/a&gt; that explains in even more details how the Disruptor works.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that the Disruptor-style ring buffer has significant resource requirement, i.e., it requires N cores, where N is the number of producers and consumers, to be performant. And it will keep cores busy by busy waiting (looping). So huge downside. If you don&amp;rsquo;t need this type of low latency architecture, it&amp;rsquo;s much better to stay with channels.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Performance Comparison&lt;/h3&gt;

&lt;p&gt;These benchmarks are performed on a MacBook Pro with 2.8GHz Intel Core i7 procesor (Haswell), and 16 GB 1600MHz DDR3 memory. Go version 1.2rc5.&lt;/p&gt;

&lt;p&gt;The 2 channel consumers benchmark is a single producer sending to 2 channels, each channel consumed by a separate goroutine. So it is apples-to-apples compare to the ring buffer 2 consumers benchmark.&lt;/p&gt;

&lt;p&gt;You can see clearly the requirement of 1 core per consumer/producer in the ring buffer implementation (first 6 lines). Without that, performance suffer greately!&lt;/p&gt;

&lt;p&gt;Also notice that the channel benchmark (last 6 lines) is faster for a single core than multi-cores. This is probably due to your friendly cache at play.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go test -bench=. -run=xxx -cpu=1,2,3
PASS
Benchmark1ProducerAnd1Consumer     10000            339807 ns/op
Benchmark1ProducerAnd1Consumer-2        10000000               258 ns/op
Benchmark1ProducerAnd1Consumer-3        10000000               260 ns/op
Benchmark1ProducerAnd2Consumers    10000            341859 ns/op
Benchmark1ProducerAnd2Consumers-2         200000             14967 ns/op
Benchmark1ProducerAnd2Consumers-3        5000000               340 ns/op
BenchmarkChannels1Consumer      10000000               241 ns/op
BenchmarkChannels1Consumer-2     5000000               436 ns/op
BenchmarkChannels1Consumer-3     5000000               446 ns/op
BenchmarkChannels2Consumers      5000000               319 ns/op
BenchmarkChannels2Consumers-2    5000000               647 ns/op
BenchmarkChannels2Consumers-3    5000000               570 ns/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Go Channel: 1 Producer and 1 Consumer&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;func BenchmarkChannels(b *testing.B) {
	dataSize := 256
	data := make([]byte, dataSize)
	for i := 0; i &amp;lt; dataSize; i++ {
		data[i] = byte(i % 256)
	}

	ch := make(chan []byte, 128)
	go func() {
		for i := 0; i &amp;lt; b.N; i++ {
			// To be fair, we want to make a copy of the data, otherwise we are just
			// sending the same slice header over and over. In the real-world, the
			// original data slice may get over-written by the next set of bytes.
			tmp := make([]byte, dataSize)
			copy(tmp, data)
			ch &amp;lt;- tmp
		}
	}()

	for i := 0; i &amp;lt; b.N; i++ {
		out := &amp;lt;-ch
		if !bytes.Equal(out, data) {
			b.Fatalf(&amp;quot;bytes not the same&amp;quot;)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Ring Buffer: 1 Producer and 1 Consumer&lt;/h4&gt;

&lt;p&gt;This test function creates a 256-slot ring buffer, with each slot being 128 bytes long. It also creates 1 producer and 1 consumer, where the producer will put the same byte slice into the buffer 10,000 times, and the consumer will read from the buffer and then make sure we read the correct byte slice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Test1ProducerAnd1ConsumerAgain(t *testing.T) {
	// Creates a new ring buffer that&#39;s 256 slots and each slot 128 bytes long.
	r, err := New(128, 256)
	if err != nil {
		t.Fatal(err)
	}

	// Gets a single producer from the the ring buffer. If NewProducer() is called
	// the second time, an error will be returned.
	p, err := r.NewProducer()
	if err != nil {
		t.Fatal(err)
	}

	// Gets a singel consumer from the ring buffer. You can call NewConsumer() multiple
	// times and get back a new consumer each time. The consumers are independent and will
	// go through the ring buffers separately. In other words, each consumer will have 
	// their own independent sequence tracker.
	c, err := r.NewConsumer()
	if err != nil {
		t.Fatal(err)
	}

	// We are going to write 10,000 items into the buffer.
	var count int64 = 10000

	// Let&#39;s prepare the data to write. It&#39;s just a basic byte slice that&#39;s 256 bytes long.
	dataSize := 256
	data := make([]byte, dataSize)
	for i := 0; i &amp;lt; dataSize; i++ {
		data[i] = byte(i % 256)
	}

	// Producer goroutine
	go func() {
		// Producer will put the same data slice into the buffer _count_ times
		for i := int64(0); i &amp;lt; count; i++ {
			if _, err := p.Put(data); err != nil {
				// Unfortuantely we have an issue here. If the producer gets an error 
				// and exits, the consumer will continue to wait and not exit. In the
				// real-world, we need to notify all the consumers that there&#39;s been
				// an error and ensure they exit as well.
				t.Fatal(err)
			}
		}
	}()

	var total int64

	// Consumer goroutine
	
	// The consumer will also read from the buffer _count_ times
	for i := int64(0); i &amp;lt; count; i++ {
		if out, err := c.Get(); err != nil {
			t.Fatal(err)
		} else {
			// Check to see if the byte slice we got is the same as the original data
			if !bytes.Equal(out.([]byte), data) {
				t.Fatalf(&amp;quot;bytes not the same&amp;quot;)
			}

			total++
		}
	}

	// Check to make sure the count matches
	if total != count {
		t.Fatalf(&amp;quot;Expected to have read %d items, got %d\n&amp;quot;, count, total)
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Ring Buffer: 1 Producer and 2 Consumers&lt;/h4&gt;

&lt;p&gt;As mentioned before, the ring buffer supports multiple consumers. &lt;a href=&#34;https://github.com/reducedb/ringbuffer/blob/master/bytebuffer/ringbuffer_test.go#L304&#34;&gt;This example&lt;/a&gt; shows how you would create two consumers.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;See tl;dr on top.&lt;/p&gt;

&lt;p&gt;Comments/feedbacks on &lt;a href=&#34;https://news.ycombinator.com/item?id=6831293&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;http://www.reddit.com/r/golang/comments/1rvvb6/ring_buffer_variablelength_lowlatency_lockfree/&#34;&gt;Reddit&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>